{"version":3,"file":"maince98a9f731fd51c45154.js","mappings":";;;;;;;;;;;;;;AAAA,iEAAe,mDAAmD;;;;;;;;;;;;;;ACAlE,iEAAe,oDAAoD;;;;;;;;;;;;;;ACAnE,iEAAe,oDAAoD;;;;;;;;;;;ACAnE;;;;;;;;;;;;;;;;;;;;;;;;ACA0C;AACN;;AAEpC;AACO;AACP;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACO;;AAEP;AACO;AACP;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;;AAEA;AACO;AACP,sBAAsB,4BAA4B;AAClD;AACA;AACA;AACA;;AAEA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,uDAAU;AACZ;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,iDAAS;AACX;;AAEO;AACP;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;;AAEA;AACO;AACP;AACA;AACA;AACA;AACA;;AAEA;AACO;AACP;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;ACnGuE;AACZ;AAM1C;;AAEjB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACO;AACP;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,EAAE,uDAAW;AACb,qDAAqD,uDAAW;AAChE;AACA;;AAEA;AACO;AACP;AACA;AACA,EAAE,uDAAW;AACb;AACA;AACA;AACA,IAAI,2DAAW;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACO;AACP;AACA;;AAEA;AACA,eAAe,uDAAW;;AAE1B;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,2DAAW,iBAAiB,8CAAU,EAAE,6CAAS,EAAE,oDAAgB;AACrE,EAAE,uEAAuB,CAAC,uDAAW;;AAErC;AACA,EAAE,iDAAS;;AAEX;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,uDAAW;;AAEf;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,uDAAW;AAC1B;AACA,mBAAmB,gBAAgB;AACnC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA,MAAM;AACN;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;ACxJ2C;AACC;AACD;AACC;AAC5C;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,0DAAO,CAAC;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,MAAM;AACN,MAAM,yDAAiB;AACvB;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,kCAAkC,0DAAO,CAAC;AAC1C,mCAAmC,0DAAQ,CAAC;AAC5C,qCAAqC,yDAAQ,CAAC;;AAE9C;;AAEA;AACA;AACA;AACA,IAAI;AACJ;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;AC1KyB;AACE;AACoC;AACG;AACb;;AAErD;AACA;AACA;AACA;;AAEA;AACA;AACA,EAAE,iDAAS;AACX;AACA,EAAE,2DAAW;AACb;AACA,IAAI,8CAAU;AACd,IAAI,6CAAS;AACb,IAAI,oDAAgB;AACpB;AACA;AACA,CAAC;;AAED;AACA;AACA,EAAE,iDAAS;AACX;AACA,EAAE,2DAAW;AACb;AACA,IAAI,8CAAU;AACd,IAAI,6CAAS;AACb,IAAI,oDAAgB;AACpB;AACA;AACA,EAAE,uEAAuB,CAAC,uDAAW;AACrC,CAAC;;AAED;AACO;AACP;AACA,EAAE,uDAAW;AACb;AACA,IAAI,+DAAe;AACnB;AACA;AACA;AACA,MAAM,wDAAe;AACrB,MAAM,+DAAmB;AACzB;AACA;AACA,GAAG;AACH;;AAEA;AACA,aAAa,6CAAI;AACjB;;AAEA;AACA,sBAAsB,mDAAO;;AAE7B;AACA,8CAA8C;AAC9C,IAAI;AACJ;AACA;;AAEA;AACA;;AAEA;AACA;AACA,EAAE,uDAAW,aAAa;AAC1B,qDAAqD,uDAAW;AAChE,gBAAgB,uDAAW;AAC3B;AACA,IAAI,oEAAoB;AACxB;AACA;;AAEA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;ACnFyB;AACsB;AACG;AACD;;AAEjD;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;;AAEA;AACO;AACP;AACA;AACA;AACA,IAAI;AACJ;;AAEA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,gEAAgB,CAAC,uDAAW;AACrD;AACA,IAAI,gEAAgB;AACpB,uDAAuD,uDAAW;AAClE;AACA,IAAI,4DAAe;AACnB,IAAI;AACJ;AACA;AACA;AACA,IAAI,6DAAa;AACjB;AACA;AACA,IAAI,uDAAW;AACf;AACA,MAAM,+DAAe;AACrB;AACA;AACA;AACA,QAAQ,wDAAe;AACvB,QAAQ,+DAAmB;AAC3B,QAAQ,0DAAqB;AAC7B;AACA,KAAK;AACL;AACA,uDAAuD,uDAAW;AAClE;AACA;;AAEO;AACP;AACA;;AAEA;AACA;AACA;;AAEA;AACA,eAAe,uDAAW;;AAE1B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,uBAAuB,uDAAW;AAClC;AACA;AACA;AACA;AACA,IAAI,gEAAgB;AACpB,IAAI,uDAAW;AACf;AACA,uDAAuD,uDAAW;AAClE,IAAI,4DAAe;AACnB;AACA,qDAAqD,uDAAW;AAChE;AACA,EAAE,4DAAe;AACjB;;;;;;;UCjHA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;UENA;UACA;UACA;UACA;UACA;UACA;UACA;UACA","sources":["webpack://to-do/./src/assets/check.png","webpack://to-do/./src/assets/delete.png","webpack://to-do/./src/assets/pencil.png","webpack://to-do/./src/style/main.css?a159","webpack://to-do/./src/Components/createProject.js","webpack://to-do/./src/Components/createTask.js","webpack://to-do/./src/Components/domComponents.js","webpack://to-do/./src/Components/handle.js","webpack://to-do/./src/Components/modal.js","webpack://to-do/webpack/bootstrap","webpack://to-do/webpack/runtime/define property getters","webpack://to-do/webpack/runtime/hasOwnProperty shorthand","webpack://to-do/webpack/runtime/make namespace object","webpack://to-do/webpack/before-startup","webpack://to-do/webpack/startup","webpack://to-do/webpack/after-startup"],"sourcesContent":["export default \"images/check.e4c04f40366d1b364be2a6b06b150bcb.png\";","export default \"images/delete.bfef00d7f015fc837c86ddb9d06eb1d8.png\";","export default \"images/pencil.928c2e0d805f4c2c077d62c133efb527.png\";","// extracted by mini-css-extract-plugin\nexport {};","import { createTask } from \"./createTask\";\nimport { hideModal } from \"./modal\";\n\n// BluePrint for creating Projects\nexport class Project {\n  constructor(name) {\n    this.name = name;\n    this.task = [];\n  }\n\n  getName() {\n    return this.name;\n  }\n\n  setName(name) {\n    this.name = name;\n  }\n}\n\n// create array that will store all projects\nexport let projectList = [];\n\n// create a new project and add then to the projectList array\nexport function createProject(projectName) {\n  projectName = capitalizeFirstLetter(projectName);\n  const project = projectList.find((p) => p.name === projectName);\n  if (project) {\n    alert(\"This project is already stored\");\n  } else {\n    if (projectName.length > 1) {\n      const project = new Project(projectName);\n      projectList.push(project);\n    } else {\n      alert(\"Project word count has to be higher than 1\");\n    }\n  }\n}\n\n// find out the index of the given project\nexport function findProjectIndex(projectList, projectName) {\n  for (let index = 0; index < projectList.length; index++) {\n    if (projectList[index].name === projectName) return index;\n  }\n  return -1;\n}\n\n// add task to a project\nexport function addTaskToProject(\n  title,\n  description,\n  dueDate,\n  priority,\n  arrayName\n) {\n  const projectName = arrayName;\n  let projectNamesIndex = findProjectIndex(projectList, projectName);\n  createTask(\n    title,\n    description,\n    dueDate,\n    priority,\n    projectList[projectNamesIndex].task\n  );\n  hideModal();\n}\n\nexport function populateProjectDropdown(projectList) {\n  // Get the dropdown element from the DOM\n  const projectDropdown = document.getElementById(\"projectDropdown\");\n\n  // Clear the current options in the dropdown\n  projectDropdown.innerHTML = \"\";\n\n  // Generate a new option element for each project and append it to the dropdown\n  projectList.forEach((project) => {\n    const option = document.createElement(\"option\");\n    option.value = project.getName();\n    option.text = project.getName();\n    projectDropdown.appendChild(option);\n  });\n}\n\n// capitalize the first letter of project name\nfunction capitalizeFirstLetter(word) {\n  return word.charAt(0).toUpperCase() + word.slice(1).toLowerCase();\n}\n\n// delete a project object form the array list\nexport const deleteProjectObject = (index) => {\n  projectList.splice(index, 1);\n  localStorage.setItem(\"projectList\", JSON.stringify(projectList));\n  const taskContainer = document.querySelector(\".taskContainer\");\n  taskContainer.textContent = \"\";\n};\n\n// create a default value for task to go to\nexport function createDefaultProject() {\n  let inbox = \"Inbox\";\n  createProject(inbox);\n}\n\n","import { projectList, populateProjectDropdown } from \"./createProject\";\nimport { taskElement, createModal } from \"./domComponents\";\nimport {\n  hideModal,\n  clearModal,\n  setNewTaskDetails,\n  addTaskOrProject,\n} from \"./modal\";\n\n// blueprint to create task\nexport class Todo {\n  constructor(title, description, dueDate, priority) {\n    this.title = title;\n    this.description = description;\n    this.dueDate = dueDate;\n    this.priority = priority;\n    this.done = false;\n  }\n\n  //   Getters\n  getTitle() {\n    return this.title;\n  }\n  getDescription() {\n    return this.description;\n  }\n  getDueDate() {\n    return this.dueDate;\n  }\n\n  getPriority() {\n    return this.priority;\n  }\n  //   Setters\n  setTitle(title) {\n    this.title = title;\n  }\n  setDescription(description) {\n    this.description = description;\n  }\n  setDueDate(dueDate) {\n    this.dueDate = dueDate;\n  }\n  setPriority(priority) {\n    this.priority = priority;\n  }\n}\n\n// create a task instance and save it to any Array\nexport function createTask(title, description, dueDate, priority, arrayList) {\n  const task = new Todo(title, description, dueDate, priority);\n  arrayList.push(task);\n}\n\n// delete tasks from array\nconst deleteTask = (event) => {\n  const projectId = parseInt(event.currentTarget.dataset.projectId);\n  const taskId = parseInt(event.currentTarget.dataset.id);\n  projectList[projectId].task.splice(taskId, 1);\n  localStorage.setItem(\"projectList\", JSON.stringify(projectList));\n  getProjectsTask(projectId);\n};\n\n// display tasks stored in a project on the screen\nexport const getProjectsTask = (projectIndex) => {\n  const taskContainer = document.querySelector(\".taskContainer\");\n  taskContainer.textContent = \" \";\n  projectList[projectIndex].task.forEach((element, taskIndex) => {\n    const name = element.getTitle();\n    const date = element.getDueDate();\n    const priority = element.getPriority();\n    taskElement(\n      taskContainer,\n      name,\n      date,\n      priority,\n      projectIndex,\n      taskIndex,\n      editTask,\n      deleteTask,\n      finishedTask\n    );\n  });\n};\n\n// display tasks in edit modal functions\nexport function editTask(event) {\n  const projectId = parseInt(event.currentTarget.dataset.projectId);\n  const taskId = parseInt(event.currentTarget.dataset.id);\n\n  // Get task details\n  const task = projectList[projectId].task[taskId];\n\n  // Clear the modal container and populate it\n  const modalContainer = document.querySelector(\".modalContainer\");\n  // give modal a dataset for specific project and task ID\n  modalContainer.dataset.projectId = projectId;\n  modalContainer.dataset.taskId = taskId;\n  modalContainer.textContent = \"\";\n  createModal(modalContainer, clearModal, hideModal, addTaskOrProject, \"edit\");\n  populateProjectDropdown(projectList);\n\n  // Display the modal\n  hideModal();\n\n  // Populate modal fields\n  document.getElementById(\"title\").value = task.getTitle();\n  document.getElementById(\"description\").value = task.getDescription();\n  document.getElementById(\"dueDate\").value = task.getDueDate();\n  document.getElementById(\"priority\").value = task.getPriority();\n  document.getElementById(\"projectDropdown\").value =\n    projectList[projectId].getName();\n\n  //Change add task to edit task\n  const title = document.getElementById(\"1\");\n  title.textContent = \"Edit Task\";\n}\n\n// toggle the done class when user clicks on the tick\nfunction finishedTask(event) {\n  // target that the specif project and task\n  const projectId = parseInt(event.currentTarget.dataset.projectId);\n  const taskId = parseInt(event.currentTarget.dataset.id);\n  // reference that specif task\n  const task = projectList[projectId].task[taskId];\n  const taskElement = document.querySelector(\n    `[data-name=\"${task.getTitle()}\"]`\n  );\n\n  // Change the tasks class to done and update done value\n  if (task.done === false) {\n    taskElement.classList.add(\"done\");\n    // remove the background of priority\n    if (\n      taskElement.classList.contains(\"high\") ||\n      taskElement.classList.contains(\"medium\") ||\n      taskElement.classList.contains(\"low\")\n    ) {\n      taskElement.classList.remove(\"high\", \"medium\", \"low\");\n    }\n    task.done = true;\n  } else {\n    taskElement.classList.remove(\"done\");\n    if (task.getPriority() === \"High\") {\n      taskElement.classList.add(\"high\");\n    } else if (task.getPriority() === \"Medium\") {\n      taskElement.classList.add(\"medium\");\n    } else {\n      taskElement.classList.add(\"low\");\n    }\n    task.done = false;\n  }\n}\n","import delIcon from \"../assets/delete.png\";\nimport editIcon from \"../assets/pencil.png\";\nimport tickIcon from \"../assets/check.png\";\nimport { setNewTaskDetails } from \"./modal\";\n// creates a new element for a new project on the DOM\nexport const crateProjectDiv = (\n  projectName,\n  containerName,\n  index,\n  getProjectsTask,\n  delProject,\n  displayProjects\n) => {\n  const projectDiv = document.createElement(\"div\");\n  const delBtn = document.createElement(\"button\");\n  projectDiv.textContent = projectName;\n  delBtn.innerHTML = `<img src=\"${delIcon}\" alt=\"delete icon\" class=\"icon del\">`;\n  projectDiv.classList.add(\"projectDiv\");\n  projectDiv.dataset.id = index;\n  projectDiv.setAttribute(\"id\", \"project\");\n  projectDiv.setAttribute(\"value\", projectName);\n  projectDiv.addEventListener(\"click\", () => {\n    getProjectsTask(index);\n  });\n  delBtn.addEventListener(\"click\", (event) => {\n    delProject(index);\n    event.stopPropagation();\n    displayProjects();\n  });\n  projectDiv.appendChild(delBtn);\n  containerName.appendChild(projectDiv);\n};\n\n// creates a form for the modal to add tasks\nexport const createModal = (\n  modalContainer,\n  clearModal,\n  hideModal,\n  addTaskOrProject,\n  formType\n) => {\n  const form = document.createElement(\"form\");\n  const addTaskAndProject = document.createElement(\"button\");\n  const clearBtn = document.createElement(\"button\");\n  const hideModalBtn = document.createElement(\"button\");\n\n  // add values to all buttons\n  addTaskAndProject.type = \"button\";\n  clearBtn.type = \"button\";\n  hideModalBtn.type = \"button\";\n\n  addTaskAndProject.classList.add(\"modalBtn\");\n  clearBtn.classList.add(\"modalBtn\");\n  hideModalBtn.classList.add(\"modalBtn\");\n\n  addTaskAndProject.textContent =\n    formType === \"task\" ? \"Add Task\" : \"Create Project\";\n  clearBtn.textContent = \"Clear\";\n  hideModalBtn.textContent = \"Hide Modal\";\n\n  addTaskAndProject.setAttribute(\"id\", \"1\");\n\n  // add eventListeners\n  clearBtn.addEventListener(\"click\", () => {\n    clearModal(formType);\n  });\n  hideModalBtn.addEventListener(\"click\", () => {\n    clearModal(formType);\n    hideModal();\n  });\n  addTaskAndProject.addEventListener(\"click\", () => {\n    if (formType === \"task\" || formType === \"project\") {\n      addTaskOrProject(formType);\n    } else {\n      setNewTaskDetails();\n    }\n  });\n\n  if (formType === \"task\" || formType === \"edit\") {\n    form.innerHTML = `\n      <label for=\"title\">Title:</label>\n      <input type=\"text\" name=\"title\" id=\"title\" />\n      <label for=\"description\">Description:</label>\n      <textarea name=\"description\" id=\"description\" cols=\"10\" rows=\"5\"></textarea>\n      <label for=\"dueDate\">Due Date:</label>\n      <input type=\"date\" name=\"dueDate\" id=\"dueDate\" />\n      <label for=\"priority\">Priority:</label>\n      <select name=\"priority\" id=\"priority\">\n        <option value = \"\" disabled hidden> Select priority</option>\n        <option value=\"High\">High</option>\n        <option value=\"Medium\">Medium</option>\n        <option value=\"Low\">Low</option>\n      </select>\n      <label for=\"projectName\">Choose Project:</label>\n      <select id=\"projectDropdown\">\n      </select>\n    `;\n  } else {\n    form.innerHTML = `\n      <label for=\"projectName\">Project Name:</label>\n      <input type=\"text\" name=\"projectName\" id=\"projectName\" />\n    `;\n  }\n\n  form.innerHTML += `\n    <div class=\"buttonHolder\"> \n    </div>\n  `;\n\n  form.classList.add(\"taskForm\");\n\n  form.querySelector(\".buttonHolder\").appendChild(addTaskAndProject);\n  form.querySelector(\".buttonHolder\").appendChild(clearBtn);\n  form.querySelector(\".buttonHolder\").appendChild(hideModalBtn);\n  modalContainer.appendChild(form);\n};\n\n// create an element that will hold each task\nexport const taskElement = (\n  modalContainer,\n  titleName,\n  dueDate,\n  priority,\n  projectIndex,\n  taskIndex,\n  editTask,\n  deleteTask,\n  doneTask\n) => {\n  const holder = document.createElement(\"div\");\n  const titleHolder = document.createElement(\"p\");\n  const dateHolder = document.createElement(\"p\");\n  const btnHolder = document.createElement(\"div\");\n  const delBtn = document.createElement(\"button\");\n  const editBtn = document.createElement(\"button\");\n  const finishBtn = document.createElement(\"button\");\n\n  titleHolder.textContent = titleName;\n  dateHolder.textContent = dueDate;\n  delBtn.innerHTML = `<img src=\"${delIcon}\" alt=\"delete icon\" class=\"icon del\">`;\n  editBtn.innerHTML = `<img src=\"${editIcon}\" alt=\"edit icon\" class=\"icon edit\">`;\n  finishBtn.innerHTML = `<img src=\"${tickIcon}\" alt=\"tick icon\" class=\"icon finish\">`;\n\n  holder.classList.add(\"task\");\n\n  // condition to determine task color\n  if (priority === \"High\") {\n    holder.classList.add(\"high\");\n  } else if (priority === \"Medium\") {\n    holder.classList.add(\"medium\");\n  } else {\n    holder.classList.add(\"low\");\n  }\n  editBtn.addEventListener(\"click\", editTask);\n  delBtn.addEventListener(\"click\", deleteTask);\n  finishBtn.addEventListener(\"click\", doneTask);\n\n  finishBtn.dataset.projectId = projectIndex;\n  finishBtn.dataset.id = taskIndex;\n  delBtn.dataset.projectId = projectIndex;\n  delBtn.dataset.id = taskIndex;\n  editBtn.dataset.projectId = projectIndex;\n  editBtn.dataset.id = taskIndex;\n  holder.dataset.projectId = projectIndex;\n  holder.dataset.id = taskIndex;\n  holder.dataset.name = titleName;\n\n  btnHolder.appendChild(finishBtn);\n  btnHolder.appendChild(editBtn);\n  btnHolder.appendChild(delBtn);\n  btnHolder.classList.add(\"btnHolderForTask\");\n\n  holder.appendChild(titleHolder);\n  holder.appendChild(dateHolder);\n  holder.appendChild(btnHolder);\n  modalContainer.appendChild(holder);\n};\n","import {\n  projectList,\n  populateProjectDropdown,\n  Project,\n  deleteProjectObject,\n  createDefaultProject,\n} from \"./createProject\";\nimport \"../style/main.css\";\nimport { crateProjectDiv, createModal } from \"./domComponents\";\nimport { clearModal, hideModal, addTaskOrProject } from \"./modal\";\nimport { getProjectsTask, Todo } from \"./createTask\";\n\nconst createProjects = document.querySelector(\".addNewProject\");\nconst projectHolder = document.querySelector(\".newProjectContainer\");\nconst modalContainer = document.querySelector(\".modalContainer\");\nconst showModalBtn = document.getElementById(\"showModal\");\n\n// add task to the array list and display them on the screen\ncreateProjects.addEventListener(\"click\", () => {\n  hideModal();\n  modalContainer.textContent = \"\";\n  createModal(\n    modalContainer,\n    clearModal,\n    hideModal,\n    addTaskOrProject,\n    \"project\"\n  );\n});\n\n// add the modal to the DOM and display it\nshowModalBtn.addEventListener(\"click\", () => {\n  hideModal();\n  modalContainer.textContent = \"\";\n  createModal(\n    modalContainer,\n    clearModal,\n    hideModal,\n    addTaskOrProject,\n    \"task\"\n  );\n  populateProjectDropdown(projectList);\n});\n\n// if projects stored in localStorage display them\nexport function displayStoredProjects() {\n  projectHolder.textContent = \"\";\n  projectList.forEach((p, index) => {\n    let name = p.getName();\n    crateProjectDiv(\n      name,\n      projectHolder,\n      index,\n      getProjectsTask,\n      deleteProjectObject,\n      displayStoredProjects\n    );\n  });\n}\n\nfunction reviveTodo(data) {\n  return new Todo(data.title, data.description, data.dueDate, data.priority);\n}\n\nfunction reviveProject(data) {\n  const project = new Project(data.name);\n\n  if (Array.isArray(data.task)) {\n    project.task = data.task.map(reviveTodo); // Reviving each task\n  } else {\n    project.task = [];\n  }\n\n  return project;\n}\n\nfunction populateProjectListFromStorage() {\n  const storedData = JSON.parse(localStorage.getItem(\"projectList\")) || [];\n  projectList.length = 0; // clear the array without reassigning it\n  storedData.map(reviveProject).forEach((project) => projectList.push(project));\n  let ifInbox = projectList.find((p) => p.name === \"Inbox\");\n  if (!ifInbox) {\n    createDefaultProject();\n  }\n}\n\nwindow.onload = () => {\n  populateProjectListFromStorage();\n  displayStoredProjects();\n};\n","import {\n  addTaskToProject,\n  projectList,\n  findProjectIndex,\n  createProject,\n  deleteProjectObject,\n} from \"./createProject\";\nimport { getProjectsTask } from \"./createTask\";\nimport { crateProjectDiv } from \"./domComponents\";\nimport { displayStoredProjects } from \"./handle\";\n\n// clear the modal inputs\nexport const clearModal = (formType) => {\n  if (formType === \"task\" || formType === \"edit\") {\n    // target each input\n    let title = document.getElementById(\"title\");\n    let textarea = document.getElementById(\"description\");\n    let dueDate = document.getElementById(\"dueDate\");\n    let priority = document.getElementById(\"priority\");\n    let projectsName = document.getElementById(\"projectDropdown\");\n    // set each input value to blank\n    title.value = \" \";\n    textarea.value = \" \";\n    dueDate.value = \"\";\n    priority.value = \"\";\n    projectsName.value = \"\";\n  } else {\n    let projectName = document.getElementById(\"projectName\");\n    projectName.value = \"\";\n  }\n};\n\n// hide the modal\nexport const hideModal = () => {\n  const modalContainer = document.querySelector(\".modalContainer\");\n  if (modalContainer.classList.contains(\"hideModalClass\")) {\n    modalContainer.classList.remove(\"hideModalClass\");\n  } else modalContainer.classList.add(\"hideModalClass\");\n};\n\n// add task or project\nexport const addTaskOrProject = (formType) => {\n  // check if the form is a task or project\n  if (formType === \"task\") {\n    // target the values and store them into variables\n    let title = document.getElementById(\"title\").value;\n    let textarea = document.getElementById(\"description\").value;\n    let dueDate = document.getElementById(\"dueDate\").value;\n    let priority = document.getElementById(\"priority\").value;\n    let projectsName = document.getElementById(\"projectDropdown\").value;\n    // get the index of the project\n    const projectIndex = findProjectIndex(projectList, projectsName);\n    // create the task\n    addTaskToProject(title, textarea, dueDate, priority, projectsName);\n    localStorage.setItem(\"projectList\", JSON.stringify(projectList));\n    // update the display\n    getProjectsTask(projectIndex);\n  } else {\n    // target the forms input\n    let name = document.getElementById(\"projectName\").value;\n    // create the project\n    createProject(name);\n    const projectHolder = document.querySelector(\".newProjectContainer\");\n    projectHolder.textContent = \"\";\n    projectList.forEach((p, index) => {\n      let name = p.getName();\n      crateProjectDiv(\n        name,\n        projectHolder,\n        index,\n        getProjectsTask,\n        deleteProjectObject,\n        displayStoredProjects\n      );\n    });\n    hideModal();\n    localStorage.setItem(\"projectList\", JSON.stringify(projectList));\n  }\n};\n\nexport const setNewTaskDetails = () => {\n  // target modal\n  const modalContainer = document.querySelector(\".modalContainer\");\n\n  // get dataset vales for modal\n  const projectId = parseInt(modalContainer.dataset.projectId);\n  const taskId = parseInt(modalContainer.dataset.taskId);\n\n  // Get task details\n  const task = projectList[projectId].task[taskId];\n\n  // set new values\n  task.setTitle(document.getElementById(\"title\").value);\n  task.setDescription(document.getElementById(\"description\").value);\n  task.setDueDate(document.getElementById(\"dueDate\").value);\n  task.setPriority(document.getElementById(\"priority\").value);\n  let projectsName = document.getElementById(\"projectDropdown\").value;\n\n  // create a condition that checks if the value of projectDropDown has been changed to a new project\n  if (projectsName !== projectList[projectId].getName()) {\n    let title = document.getElementById(\"title\").value;\n    let textarea = document.getElementById(\"description\").value;\n    let dueDate = document.getElementById(\"dueDate\").value;\n    let priority = document.getElementById(\"priority\").value;\n    addTaskToProject(title, textarea, dueDate, priority, projectsName);\n    projectList[projectId].task.splice(taskId, 1);\n    hideModal();\n    localStorage.setItem(\"projectList\", JSON.stringify(projectList));\n    getProjectsTask(projectId);\n  }\n  localStorage.setItem(\"projectList\", JSON.stringify(projectList));\n  hideModal();\n  getProjectsTask(projectId);\n};\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\n__webpack_require__(\"./src/Components/createTask.js\");\n__webpack_require__(\"./src/Components/createProject.js\");\n__webpack_require__(\"./src/Components/handle.js\");\n__webpack_require__(\"./src/Components/domComponents.js\");\nvar __webpack_exports__ = __webpack_require__(\"./src/Components/modal.js\");\n",""],"names":[],"sourceRoot":""}